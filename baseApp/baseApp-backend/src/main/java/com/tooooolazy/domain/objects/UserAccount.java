package com.tooooolazy.domain.objects;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * UserAccount generated by hbm2java
 */
@Entity
@Table(name = "USERACCOUNT", uniqueConstraints = @UniqueConstraint(columnNames = "USERNAME"))
@JsonIgnoreProperties({"user"}) // it breaks auto json generation (got into a loop)
public class UserAccount implements java.io.Serializable {

	private static final long serialVersionUID = 12585971147944670L;

	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "USERACCOUNT_generator")
	@SequenceGenerator(name="USERACCOUNT_generator", sequenceName = "USERCODE_SEQ", allocationSize=1)
	@Column(name = "USERCODE", unique = true, nullable = false)
	private Integer userCode;
	@OneToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
	@PrimaryKeyJoinColumn
	private User user;
	@Column(name = "USERNAME", unique = true, nullable = false, length = 30)
	private String username;
	@Column(name = "PASSWORD", nullable = true, length = 100) // in case login takes place with LDAP or something like it
	private String password;
	@Column(name = "GUID", length = 60)
	private String guid;
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "LASTLOGIN", length = 26)
	private Date lastlogin;
	@Column(name = "USERINSERT", nullable = false, length = 30)
	private String userInsert;
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "TIMEINSERT", nullable = false, length = 26)
	private Date timeInsert;
	@Column(name = "USERUPDATE", nullable = false, length = 30)
	private String userUpdate;
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "TIMEUPDATE", nullable = false, length = 26)
	private Date timeUpdate;
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = "userAccount")
	private Set<AccountRole> accountRoles = new HashSet<AccountRole>(0);

	public UserAccount() {
	}

	public UserAccount(String username, String password,
			String userInsert, Date timeInsert, String userUpdate,
			Date timeUpdate) {
		this.username = username;
		this.password = password;
		this.userInsert = userInsert;
		this.timeInsert = timeInsert;
		this.userUpdate = userUpdate;
		this.timeUpdate = timeUpdate;
	}

	public UserAccount(String username, String password,
			String guid, Date lastlogin, String userInsert, Date timeInsert,
			String userUpdate, Date timeUpdate, Set<AccountRole> accountRoles) {
		this.username = username;
		this.password = password;
		this.guid = guid;
		this.lastlogin = lastlogin;
		this.userInsert = userInsert;
		this.timeInsert = timeInsert;
		this.userUpdate = userUpdate;
		this.timeUpdate = timeUpdate;
		this.accountRoles = accountRoles;
	}

	public Integer getUserCode() {
		return this.userCode;
	}

	public void setUserCode(Integer userCode) {
		this.userCode = userCode;
	}

	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getGuid() {
		return this.guid;
	}

	public void setGuid(String guid) {
		this.guid = guid;
	}

	public Date getLastlogin() {
		return this.lastlogin;
	}

	public void setLastlogin(Date lastlogin) {
		this.lastlogin = lastlogin;
	}

	public String getUserInsert() {
		return this.userInsert;
	}

	public void setUserInsert(String userInsert) {
		this.userInsert = userInsert;
	}

	public Date getTimeInsert() {
		return this.timeInsert;
	}

	public void setTimeInsert(Date timeInsert) {
		this.timeInsert = timeInsert;
	}

	public String getUserUpdate() {
		return this.userUpdate;
	}

	public void setUserUpdate(String userUpdate) {
		this.userUpdate = userUpdate;
	}

	public Date getTimeUpdate() {
		return this.timeUpdate;
	}

	public void setTimeUpdate(Date timeUpdate) {
		this.timeUpdate = timeUpdate;
	}

	public Set<AccountRole> getAccountRoles() {
		return this.accountRoles;
	}

	public void setAccountRoles(Set<AccountRole> accountRoles) {
		this.accountRoles = accountRoles;
	}

	@Transient
	public boolean hasRole(int roleCode) {
		for (AccountRole ar : getAccountRoles()) {
			if (ar.getUserRole().getRoleCode() == roleCode)
				return true;
		}
		return false;
	}
}
